# -*- coding: utf-8 -*-
"""SSB_CS_DaySeven.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PhJROS-eg54ZSGXv55KGcN4xxwyx0ckq

# **Summer Springboard Computer Science Day Seven**

## **Make a copy in your Google Drive**
## **Rename it to "Day7_FirstnameLastname"**
## **Share your notebook with your instructor using the top right share button**

### Objects

Problem 1: Fill in the Blanks

Given the below **Circle** class, fill in the blank to correctly calculate the area of a circle.

Hint: the constant **pi** can be found in the **math** module.
"""

# Your code here #

class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return # Your code here # * self.radius ** 2

"""Problem 1.2: Modify the Constructor

Add a constructor to the above **Circle** class that accepts a **color** attribute.  Then, create a method called **get_color** that returns the **color** value of the **Circle**.

Problem 2: Debug the Code

Identify and fix the issue in the below code containing the **Temperature** class.
"""

class Temperature:
    def __init__(self, celsius):
        self.celsius = celsius

    def get_fahrenheit(self):
        return self.celsius * 9 / 5 + 32

temp = Temperature(0)
print(temp.getFahrenheit())

"""Problem 3: Debug the Code Pt 2

Identify and fix the issues in the below code containing the **Student** class.  Make sure that your code can handle the case that **grades** is **None** when initializing.
"""

class Student:
    def _init__(self, name, grades=None):
        self.name = name
        self.grades = grades

    def add_grade(self, grade):
        grades.append(grade)

    def get_average(self):
        return sum(self.grades) / len(grades)

student1 = Student("Giovanni")
student1.addGrade(88)
student2 = Student("Paul", [92, 76, 88])
print(student2.getAverage())

"""Problem 4: Create a Class

Create a class named **Book** with two attributes:
1.  **title** which holds the title of the book
2.  **author** which holds the author of the book

Then, write a method **get_details** that returns a string formatted as follows:
**Title: [title], Author: [author]"** Note that the values of each attribute are contained within brackets.
"""

# Your code here

"""Problem 4.2: Instantiate an Object

Using the **Book** class from above, create an object representing the book **The Odyssey** by **Homer**.  Then, print the details of the book using the **get_details** method.
"""

# Your code here

"""Problem 5: Working with Multiple Objects

Define a class called **Person** with two attributres:
1.  **name** which holds the name of the person
2.  **age** which holds the age of the person

Then, create two **Person** objects with different names and ages.  Write a function **compare_age** that takes two **Person** objects and prints which person is older (you can choose the functionality for the case that they are the same age).
"""

# Your code here