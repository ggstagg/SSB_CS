# -*- coding: utf-8 -*-
"""SSB_CS_DayEight.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zRE9h2msMMO11goOHjYETSR6T2l8o9ff

# **Summer Springboard Computer Science Day Eight**

## **Make a copy in your Google Drive**
## **Rename it to "Day8_FirstnameLastname"**
## **Share your notebook with your instructor using the top right share button**

### Inheritance

Problem 1: Define a Subclass

Given a base class **Vehicle** that represents basic vehicles, define a subclass **Car** that inherits from **Vehicle** and adds an attribute **doors** (the number of doors the vehicle has).  Additionally, implement a method **display_info()** in **Car** that prints our the vehicle's make, model, and number of doors.
"""

class Vehicle:
  def __init__(self, make, model):
    self.make = make
    self.model = model

# Your code here

"""Problem 2: Fill in the Blanks

Fill in the blanks below to correctly implement inheritance where **ElectricCar** is a subclass of **Car**, adding an additional attribute **battery_size**.
"""

class Car:
    def __init__(self, make, model):
        self.make = make
        self.model = model

class ElectricCar(# Your code here #):
    def __init__(self, make, model, battery_size):
        # Your code here #.__init__(self, make, model)
        self.battery_size = battery_size

"""Problem 3: Fix the Code

Fix the bugs in the below code, so that the code creates an instance of **SportsCar** and calls its **display_car()** method.
"""

class Vehicle:
    def __init__(self, make):
        self.make = make

class Car(Vehicle):
    def __init__(self, make, model):
        Vehicle.__init__(model)
        self.model = model

class SportsCar(Car):
    def __init__(self, make, model, top_speed):
        Car.__init__(self, make, model)
        self.top_speed = top_speed

    def display_car(self):
        print(f"Make: {self.make}, Model: {self.model}, Top Speed: {self.top_speed}mph")

my_sportscar = SportCar("Ferrari", "488 Spider", 211)
my_sportscar.display_car()

"""### \*\*\**PAUSE****

### Polymorphism

Problem 1: Understanding Polymorphism

Fill in the blanks below so that we can demonstrate polymorphism with a common interface for different payment methods.
"""

class PaymentMethod:
    def pay(self, amount):
        pass

class CreditCard(PaymentMethod):
    def pay(self, amount):
        print(f"Paying ${amount} using CreditCard.")

class PayPal(PaymentMethod):
    def __init__(self, email_address):
        self.email_address = email_address

    def pay(self, amount):
        print(f"Paying ${amount} using PayPal account: {self.email_address}")

def process_payment(# Your code here #, # Your code here #):
    # Your code here #.pay(# Your code here #)

# Usage
credit_card = CreditCard()
paypal = PayPal("user@example.com")
process_payment(credit_card, 100)
process_payment(paypal, 75)

"""Problem 1.2: Deeper Understanding

In a comment below, write an explanation of how polymorphism is used in the first part of the problem to process payments differently for each payment method.
"""

# Your explanation here

"""Problem 2: Correct the Code

Fix the bugs in the below code so that it runs properly.

Hint: The output should be as follows:
```
Rendering a triangle
Rendering a rectangle
```



"""

class Shape:
    def render(self):
        print("Rendering a shape")

class Triangle(Shape):
    def render(self):
        print("Rendering a triangle")

class Rectangle(Shape):
    def __init__(self):
        super().render()

    def render(self):
        print("Rendering a rectangle")

shapes = [Triangle(), Rectangle()]
for shape in shapes:
    shape.render()

"""Problem 3: Implement Polymorphism

Create two classes:
1.  **Square**: takes a side length on initialization
2.  **Circle**: takes a radius length on initialization

Each of these classes should extend a base class **Shape**.  Both classes should override a method named **area()** from the **Shape** class. Demonstrate polymorphism by creating a function **print_area(shape)** that prints the area of the shape passed into it.
"""

# Your code here